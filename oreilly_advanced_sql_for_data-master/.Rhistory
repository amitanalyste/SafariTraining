a <- 2
a
q()
getwd()
setwd("/Users/amit/R")
getwd()
heart <- read.csv("/data/Heart.csv")
heart <- read.csv("data/Heart.csv")
head(heart)
heart <- read.csv("data/Heart.csv", header = T)
head(heart)
getwd()
install.packages("e1070")
install.packages("e1071")
library(e1071)
library(e1071)
set.seed(1)
x = matrix(rnorm(20*2), ncol = 2)
rep(1,10)
x
y
y = c(rep(-1,10), rep(1,10))
y
x[y==1,] = x[y==1,] + 1
x
plot(x, col(3-y))
plot(x, col = (3-y))
plot(x, y)
plot(x, col = 2)
plot(x, col = 4)
plot(x, col = (3-y))
dat = data.frame(x=x, y = as.factor(y))
head(dat)
dat
svmfit = svm(y~., data = dat, kernel = "linear", cost = 10, scale = FALSE)
plot(svmfit, dat)
svmfit$index
summary(svmfit)
svmfit = svm(y~., data = dat, kernel = "linear", cost = 0.1, scale = FALSE)
plot(svmfit, data = dat)
summary(svmfit)
svmfit$indexz
svmfit$index
set.seed(1)
getwd()
spark_path <- strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1] # Get your spark path
.libPaths(c(file.path(spark_path,"libexec", "R", "lib"), .libPaths())) # Navigate to SparkR folder
library(SparkR) # Load the library
sc
sc <- sparkR.init()
sqlContext <- sparkRSQL.init(sc)
df <- createDataFrame(sqlContext, iris)
head(df)
Species
getwd()
spark_path <- strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1] # Get your spark path
.libPaths(c(file.path(spark_path,"libexec", "R", "lib"), .libPaths())) # Navigate to SparkR folder
library(SparkR)
sc <- sparkR.init()
sqlContext <- sparkRSQL.init(sc)
sc <- sparkR.init(master = "local[*]", sparkEnvir = list(spark.driver.memory="2g"))
sparkR.stop()
sc <- sparkR.init()
df <- createDataFrame(sqlContext, faithful)
sqlContext <- sparkRSQL.init(sc)
df <- createDataFrame(sqlContext, faithful)
head(df)
sparkR.stop()
sc <- sparkR.init(sparkPackages="com.databricks:spark-csv_2.11:1.0.3")
sqlContext <- sparkRSQL.init(sc)
people <- read.df(sqlContext, "./examples/src/main/resources/people.json", "json")
df <- createDataFrame(sqlContext, faithful)
printSchema(df)
write.df(df, path="people.parquet", source="parquet", mode="overwrite")
hiveContext <- sparkRHive.init(sc)
sql(hiveContext, "CREATE TABLE IF NOT EXISTS src (key INT, value STRING)")
df <- createDataFrame(sqlContext, faithful)
df
head(select(df, df$eruptions))
head(select(df, "eruptions"))
head(filter(df, df$waiting < 50))
spark_path <- strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1] # Get your spark path
.libPaths(c(file.path(spark_path,"libexec", "R", "lib"), .libPaths())) # Navigate to SparkR folder
library(SparkR)
sc <- sparkR.init()
install.packages("yams")
install.packages("yaml")
getwd()
getwd()
index = read.table("/t20s/README.txt")
index = read.table("~/t20s/README.txt")
index = read.table("../t20s/README.txt")
getwd()
index = read.table("/Users/amit/R/t20s/README.txt")
index = read.table("/Users/amit/R/t20s/README.txt")
index = read.csv("/Users/amit/R/t20s/README.txt")
index.head()
head(index)
head(index,10)
head(index,10,15)
head(index,15)
head(index,20)
index[20]
index[20,]
index[20,22]
index[20:22]
index[20:22,]
tail(index)
index <- index[20:528,]
head(index)
indiaMatches = strsplit(index,"India")
indiaMatches = strsplit(index," ")
indiaMatches = sapply(strsplit,index)
?sapply
lapply(index, strsplit)
ab = function(x) { strsplit(x," ")}
indiaMatches = sapply(ab,index)
indiaMatches = sapply(index,ab)
indiaMatches = lapply(index,ab)
indiaMatches = sapply(index,ab)
index
class(index)
nrow(index)
index
length(index)
index = read.csv("/Users/amit/R/t20s/README.txt", sep = " ")
index = read.csv("/Users/amit/R/t20s/README.txt")
index = read.csv("/Users/amit/R/t20s/README.txt", sep = " ")
index = read.csv("/Users/amit/R/t20s/README.txt")
index <- index[20:528,]
index1 = data.frame(index)
index1
ncol(index1)
ncol(index)
index$1
index[1]
index[1,1]
index[1,
]
index[1,]
index[1]
index1 = read.table(index, sep = " ")
index1 = read.table("/Users/amit/R/t20s/README.txt")
index1 = read.table("/Users/amit/R/t20s/README.txt", sep = " ")
index = read.csv("/Users/amit/R/t20s/README.txt", sep = " ")
index = read.csv("/Users/amit/R/t20s/README.txt", sep = "-")
index = read.csv("/Users/amit/R/t20s/README.txt")
index <- index[20:528,]
write(index)
write(a = data = index)
write(a, data = index)
write(index, file = "index")
ls()
a <- read.table("index", sep = " ")
index
index <- index[20:528,]
index = read.csv("/Users/amit/R/t20s/README.txt")
index <- index[20:528,]
head(index)
index = read.csv("/Users/amit/R/t20s/README.txt", sep = " - ")
index = read.csv("/Users/amit/R/t20s/README.txt", sep = "-")
head(index)
install.packages("IRkernel")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
update.packages(repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
detach("package:SparkR", unload=TRUE)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
getwd()
version
getwd()
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, x1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, x2, sd2)
z2 = rep(TRUE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy1, x = z2)
rbind(df1,df2)
}
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, x1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, x2, sd2)
z2 = rep(TRUE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy1, x = z2)
rbind(df1,df2)
}
plot.class <- function(df){
require(ggplot2)
df$z <- as.factor(df$z)
ggplot(df, aes(x,y)) +
geom_point(aes(color = z, size = 3)) +
ggtitle('X vs. Y for two classes')
}
logistic.mod <- function(df){
glm(z ~ 0 + x + y, data = df, family = binomial)
}
df <- sim.logt.data(1,1,100,1,-1,-1,100,1)
df <- sim.logt.data(1,1,100,1,-1,-1,100,1)
df <- sim.logt.data(1,1,100,1,-1,-1,100,1)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, x1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, x2, sd2)
z2 = rep(TRUE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy1, x = z2)
rbind(df1,df2)
}
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, y1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, y2, sd2)
z2 = rep(TRUE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy1, x = z2)
rbind(df1,df2)
}
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, y1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, y2, sd2)
z2 = rep(TRUE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy2, x = z2)
rbind(df1,df2)
}
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, y1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, y2, sd2)
z2 = rep(FALSE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy2, x = z2)
rbind(df1,df2)
}
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, y1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, y2, sd2)
z2 = rep(FALSE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy2, x = z2)
rbind(df1,df2)
}
sim.logt.data(1,1,100,1,-1,-1,100,1)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, y1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, y2, sd2)
z2 = rep(FALSE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy2, x = z2)
rbind(df1,df2)
}
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, y1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, y2, sd2)
z2 = rep(FALSE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy2, x = z2)
rbind(df1, df2)
}
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, y1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, y2, sd2)
z2 = rep(FALSE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy2, z = z2)
rbind(df1, df2)
}
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
plot.class <- function(df){
require(ggplot2)
df$z <- as.factor(df$z)
ggplot(df, aes(x,y)) +
geom_point(aes(color = z, size = 3)) +
ggtitle('X vs. Y for two classes')
}
plot.class
plot.class(df)
logistic.mod <- function(df){
glm(z ~ 0 + x + y, data = df, family = binomial)
}
mod = logistic.mod(df)
summary(mod)
sim.logt.data <- function(x1, y1, n1, sd1, x2, y2, n2, sd2){
wx1 = rnorm(n1, x1, sd1)
wy1 = rnorm(n1, y1, sd1)
z1 = rep(TRUE, n1)
wx2 = rnorm(n2, x2, sd2)
wy2 = rnorm(n2, y2, sd2)
z2 = rep(FALSE, n2)
df1 = data.frame(x = wx1, y = wy1, z = z1)
df2 = data.frame(x = wx2, y = wy2, z = z2)
rbind(df1, df2)
}
plot.class <- function(df){
require(ggplot2)
df$z <- as.factor(df$z)
ggplot(df, aes(x,y)) +
geom_point(aes(color = z, size = 3)) +
ggtitle('X vs. Y for two classes')
}
logistic.mod <- function(df){
glm(z ~ 0 + x + y, data = df, family = binomial)
}
df <- sim.logt.data(1, 1, 100, 1, -1, -1, 100, 1)
plot.class(df)
mod <- logistic.mod(df)
summary(mod)
logistic.pred <- function(mod, df, prob = 0.5){
df$score = ifelse(predict(mod, type = 'response') > prob, TRUE, FALSE)
df
}
logistic.eval(mod,df)
logistic.eval <- function(mod, df, prob = 0.5){
require(ggplot2)
df <- logistic.pred(mod, df, prob = prob)
df$conf <- ifelse(df$z == TRUE & df$score == TRUE, 'TP',
ifelse(df$z == FALSE & df$score == TRUE, 'FP',
ifelse(df$z == FALSE & df$score == FALSE, 'TN')))
df$error <- ifelse((df$conf == 'FP' | df$conf == 'FN'), 'error','correct')
cols <- c('z','error')
df[,cols] <- lapply(df[,cols], as.factor)
p1 <- ggplot(df, aes(x,y)) +
geom_point(aes(color = z, size = 3, shape = error)) +
ggtitle('X vs. Y for two classes')
print(p1)
TP = length(df[df$conf == 'TP', 'conf'])
FP = length(df[df$conf == 'FP', 'conf'])
TN = length(df[df$conf == 'TN', 'conf'])
FN = length(df[df$conf == 'FN', 'conf'])
print(paste('accuracy =' , as.character((TP + TN)/(TP + TN + FP + FN))))
print(paste('precision =' , as.character(signif(TP)/(TP + FP)), digits = 2))
print(paste('recall =' , as.character(TP/(TP + FN))))
out <- data.frame(Positive = c(TP, FP), Negative = c(FN, TN))
row.names(out) <- c('Truepos', 'TrueNeg')
print(out)
}
logistic.eval(mod,df)
logistic.eval <- function(mod, df, prob = 0.5){
require(ggplot2)
df <- logistic.pred(mod, df, prob = prob)
df$conf <- ifelse(df$z == TRUE & df$score == TRUE, 'TP',
ifelse(df$z == FALSE & df$score == TRUE, 'FP',
ifelse(df$z == FALSE & df$score == FALSE, 'TN', 'FN')))
df$error <- ifelse((df$conf == 'FP' | df$conf == 'FN'), 'error','correct')
cols <- c('z','error')
df[,cols] <- lapply(df[,cols], as.factor)
p1 <- ggplot(df, aes(x,y)) +
geom_point(aes(color = z, size = 3, shape = error)) +
ggtitle('X vs. Y for two classes')
print(p1)
TP = length(df[df$conf == 'TP', 'conf'])
FP = length(df[df$conf == 'FP', 'conf'])
TN = length(df[df$conf == 'TN', 'conf'])
FN = length(df[df$conf == 'FN', 'conf'])
print(paste('accuracy =' , as.character((TP + TN)/(TP + TN + FP + FN))))
print(paste('precision =' , as.character(signif(TP)/(TP + FP)), digits = 2))
print(paste('recall =' , as.character(TP/(TP + FN))))
out <- data.frame(Positive = c(TP, FP), Negative = c(FN, TN))
row.names(out) <- c('Truepos', 'TrueNeg')
print(out)
}
logistic.eval(mod,df)
getwd()
list.files()
setwd(getwd()+"/iss")
getwd()+"/iss"
class(getwd())
getwd()+""
paste(getwd(),"/iss")
setwd(paste(getwd(),"/iss"))
str_trim(getwd())
install.packages("stringr")
require(stringr)
str_trim(getwd())
paste(str_trim(getwd()),"/iss")
paste(str_trim(getwd()),str_trim("/iss"))
paste(str_trim(getwd(), right),str_trim("/iss"))
paste(str_trim(getwd(), "right"),str_trim("/iss"))
str_trim(getwd())
getwd()
"/iss"
paste(getwd(),"amit")
a <- getwd()
a
b = "/iss"
b
paste(a,b)
class(b)
install.packages("repr")
install.packages("IRdisplay")
install.packages("evaluate")
install.packages("crayon")
install.packages("pbdZMQ")
install.packages("devtools")
install.packages("uuid")
install.packages("digest")
R.Version()
IRkernel::installspec(user = FALSE)
R.version
install.packages("IRkernel")
conda install -c r r-essentials
R.version
getwd()
cd ..
ls()
setwd("/Users/amit/Safari Training/oreilly_advanced_sql_for_data-master")
getwd()
library(DBI)
library(RSQLite)
install.packages("RSQLite")
library(RSQLite)
db <- sbConnect(SQLLite(), dbname = 'thunderbird_manufacturing.db')
db <- dbConnect(SQLLite(), dbname = 'thunderbird_manufacturing.db')
db <- dbConnect(SQLite(), dbname = 'thunderbird_manufacturing.db')
myQuery <- dbSendQuery(db, "select * from cusomer")
myQuery <- dbSendQuery(db, "select * from customer")
my_date <- dbFetch(myQuery, n = -1)
dbClearResult(myQuery)
print(my_date)
print(my_data)
print(my_date)
print(my_date)
remove(myQuery)
dbDisconnect()
dbDisconnect(ddb)
dbDisconnect(db)
